.\" Manpage for Shell

.TH man 3 "24 March 2018" "1.0" "shell man page"

.SH NAME
    hsh - interface to the Unix system

.SH SYNOPSIS
    $ [command] [-flag ]

.SH DESCRIPTION
     A Shell provides you with an interface to the Unix  system.
     It gathers input from you and  executes  programs  based on
     that input. When a program  finishes executing, it displays
     that program's output.

.SH PROMT
     The  prompt,  $,  which  is  called  the command prompt, is
     issued by the shell. While the prompt is displayed, you can
     type a command.
     Shell reads your input after you press Enter. It determines
     the command you want  executed by looking at the first word
     of  your  input. A  word  is  an unbroken set of characters.
     Spaces and tabs separate words.


.SH OPTIONS
     cd [arg]
     Change  the  current directory  to arg. The shell parameter
     $HOME is the default arg. If no  directory arg is found and
     the  $CDPATH   parameter  contains  a  list  of directories
     separated by colons, each of these directories is used as a
     prefix to arg in the given order, and the current directory
     is set to the first one that is found.
        $ cd /usf/lb

     env
     Prints the current environment

     exit
     Causes the shell to exit with the exit status  specified by
     n. If n is omitted then the exit status is that of the last
     command executed. (An end of file will  also exit  from the
     shell.)

     pwd
     Prints the name of the current directory.

.SH ENVIROMENT
     PATH
     The default path for executables.

.SH SEE ALSO
    sh(1),  csh(1),  environ(7),  execve(2), exit(3), getline(3),
    kill(2), malloc(3), perror(3), signal(2), strtok(3), wait(2),
    _exit(2), isatty(3).

#include <stdio.h>
#include "holberton.h"
/**
  *main - entry point for shell program
  *@ac: the number of arguments passed
  *@av: an array of strings of the arguments passed
  *@env: the current environment
  *
  *Description: function will read a line, break it into tokens, and execute
  *the call, then return to main when end of file is reached
  *Return: 0 when EOF is reached (ie user presses Ctrl + D)
  */
int main(int ac, char **av, char **env)
{
        char *line, *newline;
        size_t len = 0;
        ssize_t characters;
        char **tokenarray;
        int cmdnum = 0;

        (void)ac, (void)av;
        while (1)
        {
                line = NULL;
                len = 0;
                cmdnum++;
                if (isatty(STDIN_FILENO) == 1)
                        printprompt();
                characters = getline(&line, &len, stdin);
                if (characters == EOF || characters == -1)
                        return (ctrld(line));
                if (line[0] == '\n')
                {
                        free(line);
                        continue;
                }
                newline = _reallocchar(line);
                if (newline == NULL)
                {
                        free(line);
                        return (0);
                }
                tokenarray = tokensplit(newline);
                if (tokenarray == NULL)
                {
                        free(line);
                        free(newline);
			return (0);
                }
                exec(tokenarray, env, av, line, newline, cmdnum);
                free_all(line, newline, tokenarray);
        }
        free(line);
        return (0);
}

.SH BUGS
     Not discovered yet

.SH AUTHOR
     Written by Derek Kwok and Elena Serebryakova
